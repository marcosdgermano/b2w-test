{"version":3,"sources":["api/swapi.js","api/swapiImages.js","redux/actions/index.js","styles.js","helpers/index.js","components/ShowPlanetInfo.js","components/Button.js","components/App.js","redux/reducers/swapiReducer.js","redux/reducers/index.js","index.js"],"names":["axios","create","fetchPlanet","id","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","dispatch","response","films","wrap","_context2","prev","next","type","swapi","get","concat","sent","Promise","all","data","map","_ref2","_callee","film","image","_context","swapiImages","episode_id","abrupt","objectSpread","img","stop","_x2","apply","this","arguments","payload","planet","t0","error","_x","styled","div","_templateObject","PlanetInfo","_templateObject2","Header","h1","_templateObject3","NextButton","p","_templateObject4","button","_templateObject5","FilmImage","_templateObject6","random","x","length","undefined","Math","floor","ShowPlanetInfo","props","react_default","createElement","title","src","url","alt","className","name","separator","toString","replace","formatThousandSeparator","population","climate","terrain","style","textAlign","renderFilms","_this$props","planetRequesting","planetError","translateError","renderPlanet","React","Component","connect","state","Button","clickNext","_this","onClick","App","components_ShowPlanetInfo","components_Button","INIT_STATE","combineReducers","action","store","createStore","reducers","composeWithDevTools","applyMiddleware","reduxThunk","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"+RAEeA,MAAMC,SCAND,MAAMC,SCCRC,EAAc,SAAAC,GAAE,sBAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAI,SAAAC,EAAMC,GAAN,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAC7BN,EAAS,CAAEO,KAAM,yBADYH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAIFE,EAAMC,IAAN,gCAAAC,OAA0ClB,IAJxC,cAInBS,EAJmBG,EAAAO,KAAAP,EAAAE,KAAA,EAMLM,QAAQC,IAAIZ,EAASa,KAAKZ,MAAMa,IAApB,eAAAC,EAAAtB,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAwB,SAAAmB,EAAMC,GAAN,IAAAjB,EAAAkB,EAAA,OAAAvB,EAAAC,EAAAM,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,cAAAc,EAAAd,KAAA,EAC7BE,EAAMC,IAAIS,GADmB,cAC9CjB,EAD8CmB,EAAAT,KAAAS,EAAAd,KAAA,EAEhCe,EAAYZ,IAAZ,gCAAAC,OAAgDT,EAASa,KAAKQ,aAF9B,cAE9CH,EAF8CC,EAAAT,KAAAS,EAAAG,OAAA,SAAA7B,OAAA8B,EAAA,EAAA9B,CAAA,GAGxCO,EAASa,KAH+B,CAGzBW,IAAKN,EAAML,QAHc,wBAAAM,EAAAM,SAAAT,MAAxB,gBAAAU,GAAA,OAAAX,EAAAY,MAAAC,KAAAC,YAAA,KANP,OAMnB5B,EANmBE,EAAAO,KAazBX,EAAS,CAAEO,KAAM,eAAgBwB,QAAS,CAAEC,OAAQ/B,EAASa,KAAMZ,MAAOA,KAbjDE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA6B,GAAA7B,EAAA,SAgBzBJ,EAAS,CAAEO,KAAM,qBAAsB2B,MAAK9B,EAAA6B,KAhBnB,yBAAA7B,EAAAsB,SAAA3B,EAAA,kBAAJ,gBAAAoC,GAAA,OAAA1C,EAAAmC,MAAAC,KAAAC,YAAA,ikDCDAM,IAAOC,IAAVC,KAAnB,IAEMC,EAAaH,IAAOC,IAAVG,KAiCVC,EAASL,IAAOM,GAAVC,KAeNC,GAPOR,IAAOS,EAAVC,KAOSV,IAAOW,OAAVC,MAOVC,EAAYb,IAAOX,IAAVyB,KChDTC,EAAS,WAAW,IAAVC,EAAUtB,UAAAuB,OAAA,QAAAC,IAAAxB,UAAA,GAAAA,UAAA,GAAN,EACvB,OAAOyB,KAAKC,MAAMD,KAAKJ,SAAWC,GAAK,GCJrCK,8LAEF5B,KAAK6B,MAAMnE,YAAY,yCAGX,IACJW,EAAU2B,KAAK6B,MAAfxD,MACR,OAAIA,EACEA,EAAMmD,OAAS,EACVnD,EAAMa,IAAI,SAAAG,GACf,OACEyC,EAAA9D,EAAA+D,cAACX,EAAD,CACEY,MAAO3C,EAAK2C,MACZC,IAAK5C,EAAKO,IAAIsC,IACdC,IAAI,OAKHL,EAAA9D,EAAA+D,cAAA,qBAIJD,EAAA9D,EAAA+D,cAAA,4EAGM,IACL5B,EAAWH,KAAK6B,MAAhB1B,OACR,OACE2B,EAAA9D,EAAA+D,cAAA,WACED,EAAA9D,EAAA+D,cAACnB,EAAD,CAAQwB,UAAU,aAAajC,EAAOkC,MACtCP,EAAA9D,EAAA+D,cAAA,OAAKK,UAAU,gBACbN,EAAA9D,EAAA+D,cAAA,6BACED,EAAA9D,EAAA+D,cAAA,iBDzC2B,SAACR,GAAuB,IAApBe,EAAoBrC,UAAAuB,OAAA,QAAAC,IAAAxB,UAAA,GAAAA,UAAA,GAAR,IACnD,OAAOsB,EAAEgB,WAAWC,QAAQ,wBAAyBF,GCwClCG,CAAwBtC,EAAOuC,cAE5CZ,EAAA9D,EAAA+D,cAAA,mBACED,EAAA9D,EAAA+D,cAAA,iBAAW5B,EAAOwC,UAEpBb,EAAA9D,EAAA+D,cAAA,qBACED,EAAA9D,EAAA+D,cAAA,iBAAW5B,EAAOyC,UAEpBd,EAAA9D,EAAA+D,cAAA,qBACAD,EAAA9D,EAAA+D,cAAA,OAAKc,MAAO,CAAEC,UAAW,WAAa9C,KAAK+C,kDAO1C,IAAAC,EAC2ChD,KAAK6B,MAA/C1B,EADD6C,EACC7C,OAAQ8C,EADTD,EACSC,iBAAkBC,EAD3BF,EAC2BE,YAElC,OAAID,EAEAnB,EAAA9D,EAAA+D,cAAA,OAAKK,UAAU,oBACbN,EAAA9D,EAAA+D,cAAA,OAAKK,UAAU,eAKjBc,EACKpB,EAAA9D,EAAA+D,cAAA,SDjEiB,SAAC1B,GAC3B,OAAQA,GACN,IAAK,YACH,MAAO,0BC8DE8C,CAAeD,IAExB/C,EAAeH,KAAKoD,oBAAxB,SA/DyBC,IAAMC,WA4EpBC,cATS,SAACC,GACvB,MAAO,CACLrD,OAAQqD,EAAM7E,MAAMwB,OACpB8C,iBAAkBO,EAAM7E,MAAMsE,iBAC9BC,YAAaM,EAAM7E,MAAMuE,YACzB7E,MAAOmF,EAAM7E,MAAMN,QAIiB,CAAEX,eAA3B6F,CAA0C3B,GC9EnD6B,6MACFC,UAAY,WACRC,EAAK9B,MAAMnE,YAAY4D,EAAO,8EAI9B,OAAOQ,EAAA9D,EAAA+D,cAAChB,EAAD,CACHqB,UAAU,oBACVwB,QAAS5D,KAAK0D,WAFX,eANML,IAAMC,WAcZC,cAAQ,KAAM,CAAE7F,eAAhB6F,CAA+BE,GCA/BI,EAfH,WACV,OACE/B,EAAA9D,EAAA+D,cAAA,OAAKK,UAAU,aACbN,EAAA9D,EAAA+D,cAAA,OAAKK,UAAU,OACbN,EAAA9D,EAAA+D,cAAA,OAAKK,UAAU,aACfN,EAAA9D,EAAA+D,cAACrB,EAAD,CAAY0B,UAAU,6CACpBN,EAAA9D,EAAA+D,cAAC+B,EAAD,OAEFhC,EAAA9D,EAAA+D,cAACgC,EAAD,CAAQ3B,UAAU,uBAClBN,EAAA9D,EAAA+D,cAAA,OAAKK,UAAU,gBCZjB4B,SAAa,CACff,kBAAkB,EAClBC,YAAa,KACb/C,OAAQ,GACR9B,MAAO,KCHI4F,4BAAgB,CAC3BtF,MDKW,WAAgC,IAA/B6E,EAA+BvD,UAAAuB,OAAA,QAAAC,IAAAxB,UAAA,GAAAA,UAAA,GAAvB+D,EAAYE,EAAWjE,UAAAuB,OAAA,EAAAvB,UAAA,QAAAwB,EAC3C,OAAOyC,EAAOxF,MACV,IAAK,uBACD,OAAOb,OAAA8B,EAAA,EAAA9B,CAAA,GAAK2F,EAAZ,CAAmBP,kBAAkB,IACzC,IAAK,qBACD,OAAOpF,OAAA8B,EAAA,EAAA9B,CAAA,GACA2F,EADP,CAEIP,kBAAkB,EAClBC,YAAagB,EAAO7D,MACpBF,OAAQ,GACR9B,MAAO,KAEf,IAAK,eACD,OAAOR,OAAA8B,EAAA,EAAA9B,CAAA,GACA2F,EADP,CAEIP,kBAAkB,EAClBC,YAAa,KACb/C,OAAQ+D,EAAOhE,QAAQC,OACvB9B,MAAO6F,EAAOhE,QAAQ7B,QAE9B,QACI,OAAOmF,MEpBbW,EAAQC,sBAAYC,EAAUC,8BAAoBC,0BAAgBC,OAExEC,IAASC,OACL5C,EAAA9D,EAAA+D,cAAC4C,EAAA,EAAD,CAAUR,MAAOA,GACbrC,EAAA9D,EAAA+D,cAAC6C,EAAD,OAEJC,SAASC,eAAe","file":"static/js/main.2e16abd9.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create();","import axios from 'axios';\r\n\r\nexport default axios.create();","import swapi from '../../api/swapi';\r\nimport swapiImages from '../../api/swapiImages';\r\n\r\nexport const fetchPlanet = id => async dispatch => {\r\n    dispatch({ type: 'FETCH_PLANET_REQUEST' });\r\n\r\n    try {\r\n        const response = await swapi.get(`https://swapi.co/api/planets/${id}`);\r\n\r\n        const films = await Promise.all(response.data.films.map(async film =>  {\r\n            const response = await swapi.get(film);\r\n            const image = await swapiImages.get(`http://localhost:3001/images/${response.data.episode_id}`);\r\n            return { ...response.data, img: image.data };\r\n        }));\r\n\r\n        //console.log(response.data, films);\r\n        dispatch({ type: 'FETCH_PLANET', payload: { planet: response.data, films: films} })\r\n\r\n    } catch (e) {\r\n        dispatch({ type: 'FETCH_PLANET_ERROR', error: e });\r\n    }\r\n}\r\n\r\n// export const fetchFilms = links => async dispatch => {\r\n//     console.log('chegou');\r\n//     const responses = await Promise.all(links.map(async link =>  {\r\n//         const response = await swapi.get(link);\r\n//         return response.data;\r\n//     }));\r\n\r\n//     dispatch({ type: 'FETCH_FILMS', payload: responses });\r\n// }","import styled from 'styled-components';\r\n\r\nexport const MainContainer = styled.div ``;\r\n\r\nexport const PlanetInfo = styled.div `\r\n    position: relative;\r\n    top: 30px;\r\n    height: 460px;\r\n    width: 480px !important;\r\n    border: 3px solid #000;\r\n    border-radius: 9%;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 1);\r\n\r\n    div.dimmer {\r\n        border-radius: 9%;\r\n        height: 100%;\r\n        width: 100%;\r\n    }\r\n\r\n    div.innerContent {\r\n        position: relative;\r\n        top: 30px;\r\n    }\r\n\r\n    h2, h3 {\r\n        position: relative;\r\n        text-align: center;\r\n        margin-block-start: 0.5em !important;\r\n        margin-block-end: 0.5em !important;\r\n    }\r\n    h3 {\r\n        font-style: italic;\r\n        display: -webkit-inline-box;\r\n        font-size: 1.7rem !important;\r\n    }\r\n`;\r\n\r\nexport const Header = styled.h1 `\r\n    position: relative;\r\n    text-align: center;\r\n    top: 20px;\r\n    font-size: 4rem !important;\r\n    font-family: 'black_capsregular', Arial, sans-serif;\r\n`;\r\n\r\nexport const Film = styled.p `\r\n    position: relative;\r\n    font-style: italic;\r\n    display: inline-block;\r\n    font-size: 1rem;\r\n`\r\n\r\nexport const NextButton = styled.button `\r\n    position: relative;\r\n    width: 100px;\r\n    height: 75px;\r\n    top: 200px;\r\n`\r\n\r\nexport const FilmImage = styled.img `\r\n    width: 60px;\r\n    height: 90px;\r\n    margin: 2.5px;\r\n\r\n    &:hover {\r\n        transition: transform .32s ease;\r\n        transform: scale(2.5);\r\n    }\r\n`","export const formatThousandSeparator = (x, separator = '.') => {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, separator);\r\n}\r\n\r\nexport const translateError = (error) => {\r\n    switch (error) {\r\n      case 'Not found':\r\n        return 'Planeta nao encontrado'\r\n    }\r\n}\r\n\r\nexport const random = (x = 0) => {\r\n    return Math.floor(Math.random() * x) + 1;\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPlanet } from '../redux/actions';\r\nimport Image from './Image';\r\n\r\nimport { formatThousandSeparator, translateError, random } from '../helpers';\r\nimport { Header, Film, FilmImage } from '../styles';\r\n\r\nclass ShowPlanetInfo extends React.Component { \r\n  componentDidMount() {\r\n    this.props.fetchPlanet(1);\r\n  }\r\n\r\n  renderFilms() {\r\n    const { films } = this.props;\r\n    if (films) {\r\n      if (films.length > 0) {\r\n        return films.map(film => {\r\n          return (\r\n            <FilmImage \r\n              title={film.title}\r\n              src={film.img.url} \r\n              alt=\"\"\r\n            />\r\n          );\r\n        })\r\n      } else {\r\n        return <h3>No Film</h3>;\r\n      }\r\n    }\r\n\r\n    return <span>Error: No film loaded</span>;\r\n  }\r\n\r\n  renderPlanet() {\r\n    const { planet } = this.props;\r\n    return (\r\n      <div>\r\n        <Header className=\"ui header\">{planet.name}</Header>\r\n        <div className=\"innerContent\">\r\n          <h2>População:\r\n            <h3>&nbsp;{formatThousandSeparator(planet.population)}</h3>\r\n          </h2>\r\n          <h2>Clima: \r\n            <h3>&nbsp;{planet.climate}</h3>\r\n          </h2>\r\n          <h2>Terreno:\r\n            <h3>&nbsp;{planet.terrain}</h3>\r\n          </h2>\r\n          <h2>Filmes:</h2>\r\n          <div style={{ textAlign: 'center' }}>{this.renderFilms()}</div>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { planet, planetRequesting, planetError } = this.props;\r\n\r\n    if (planetRequesting) {\r\n      return (\r\n        <div className=\"ui active dimmer\">\r\n          <div className=\"ui loader\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (planetError) \r\n      return <p>{translateError(planetError)}</p>;\r\n\r\n    if (planet) return this.renderPlanet();\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    planet: state.swapi.planet,\r\n    planetRequesting: state.swapi.planetRequesting,\r\n    planetError: state.swapi.planetError,\r\n    films: state.swapi.films\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchPlanet })(ShowPlanetInfo);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPlanet} from '../redux/actions';\r\nimport { NextButton } from '../styles';\r\nimport { random } from '../helpers';\r\n\r\nclass Button extends React.Component {\r\n    clickNext = () => {\r\n        this.props.fetchPlanet(random(61));\r\n    }\r\n    \r\n    render() {\r\n        return <NextButton \r\n            className=\"ui button primary\" \r\n            onClick={this.clickNext}>\r\n                Next\r\n        </NextButton>;\r\n    }\r\n}\r\n\r\nexport default connect(null, { fetchPlanet })(Button);","import React from 'react';\nimport ShowPlanetInfo from './ShowPlanetInfo';\nimport Button from './Button';\nimport { MainContainer, PlanetInfo } from '../styles';\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-2\" />\n        <PlanetInfo className=\"ui main text container col-12 col-md-auto\">\n          <ShowPlanetInfo/>\n        </PlanetInfo>\n        <Button className=\"col-12 col-md-auto\"/>\n        <div className=\"col-md-3\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import _ from 'lodash';\r\n\r\nconst INIT_STATE = {\r\n    planetRequesting: true,\r\n    planetError: null,\r\n    planet: {},\r\n    films: {}\r\n}\r\n\r\nexport default (state = INIT_STATE, action) => {\r\n    switch(action.type){\r\n        case 'FETCH_PLANET_REQUEST':\r\n            return { ...state, planetRequesting: true }\r\n        case 'FETCH_PLANET_ERROR': \r\n            return { \r\n                ...state,\r\n                planetRequesting: false,\r\n                planetError: action.error,\r\n                planet: {},\r\n                films: {}\r\n            };\r\n        case 'FETCH_PLANET': \r\n            return { \r\n                ...state,\r\n                planetRequesting: false,\r\n                planetError: null,\r\n                planet: action.payload.planet,\r\n                films: action.payload.films\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport swapiReducer from './swapiReducer';\r\n\r\nexport default combineReducers({\r\n    swapi: swapiReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reduxThunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './redux/reducers';\n\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(reduxThunk)));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}